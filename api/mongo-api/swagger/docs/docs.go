// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Charles Hsu",
            "email": "fancyshenmue@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/deleteSingleDocument/{collection}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Delete Data"
                ],
                "summary": "Delete Single Document",
                "operationId": "1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoDeleteSingleDocumentBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/getDocument": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get Info"
                ],
                "summary": "Get Document",
                "operationId": "1",
                "parameters": [
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoGetBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/getDocumentRegex": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get Info"
                ],
                "summary": "Get Document Regex",
                "operationId": "1",
                "parameters": [
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoGetBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/insertManyDocument/{collection}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Insert Data"
                ],
                "summary": "Insert Many Document",
                "operationId": "1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoInsertManyDocumentBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/insertSingleDocument/{collection}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Insert Data"
                ],
                "summary": "Insert Single Document",
                "operationId": "1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoInsertSingleDocumentBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/updateSingleDocument/{collection}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update Data"
                ],
                "summary": "Update Single Document",
                "operationId": "1",
                "parameters": [
                    {
                        "type": "string",
                        "description": "collection",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.MongoUpdateSingleDocumentBodyTop"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.MongoDeleteSingleDocumentBodyTop": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "api.MongoGetBodyTop": {
            "type": "object",
            "properties": {
                "collection": {
                    "type": "string"
                },
                "findData": {
                    "type": "string"
                },
                "findField": {
                    "type": "string"
                }
            }
        },
        "api.MongoInsertManyDocumentBodyTop": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/api.MongoInsertSingleDocumentBodyTop"
            }
        },
        "api.MongoInsertSingleDocumentBodyTop": {
            "type": "object"
        },
        "api.MongoUpdateSingleDocumentBodyTop": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "info": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/",
	Schemes:     []string{},
	Title:       "Mongo RESTful API",
	Description: "Mongo RESTful API",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
