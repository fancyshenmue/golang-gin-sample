// global variable
def agentLabel

properties([
  buildDiscarder(
      logRotator(
          numToKeepStr: '30'
      )
  )
])

if (ENVIRONMENT == "dev") {
    agentLabel = "build-001"
} else if (ENVIRONMENT == "stg") {
    agentLabel = "build-002"
} else if (ENVIRONMENT == "prod") {
    agentLabel = "build-002"
}

pipeline {
  agent {
    label agentLabel
  }

  parameters {
    string(name: 'BRANCH',
      defaultValue: 'master',
      description: 'GIT BRANCH'
    )
    string(name: 'REVISION',
      defaultValue: 'HEAD',
      description: 'GIT REVISION'
    )
    choice(name: 'APP_NAME',
      choices: [
        'NOTSUPPORT',
        'cdn-api',
        'consul-api',
        'etcd-api',
        'mongo-api',
        'schedule/cdn',
        'schedule/url-check',
      ],
      description: 'CHOOSE APP_NAME'
    )
    choice(name: 'ACTION',
      choices: [
        'NOTSUPPORT',
        'build-image',
        'push-image',
        'deploy',
        'remove'
      ],
      description: 'CHOOSE ACTION'
    )
    choice(name: 'ENVIRONMENT',
      choices: [
        'NOTSUPPORT',
        'dev',
        'stg',
        'prod'
      ],
      description: 'CHOOSE ENVIRONMENT'
    )
  }

  environment {
    // define git repo info
    GIT_REPO                  = "git@github.com:fancyshenmue/golang-gin-sample.git"
    BRANCH                    = "${params.BRANCH}"
    REVISION                  = "${params.REVISION}"
    // define environment
    ENVIRONMENT               = "${params.ENVIRONMENT}"
    // define action
    ACTION                    = "${params.ACTION}"
    // define workspace
    WORKSPACE_DIR             = "${WORKSPACE}/${BUILD_ID}"
    ENV_APP_BUILD_DIR         = "${WORKSPACE_DIR}/cmd/${params.APP_NAME}"
    ENV_DOCKER_BUILD_DIR      = "${WORKSPACE_DIR}/build/Docker/${params.APP_NAME}"
    ENV_KUSTOMIZE_DIR         = "${WORKSPACE_DIR}/deployments/Kustomize/${params.APP_NAME}/overlays/${params.ENVIRONMENT}"
    // define docker info
    DOCKER_REGISTER           = "https://gcr.io"
    // add path
    PATH                      = "${env.PATH}:/usr/local/bin:${env.HOME}/bin"
    // define golang version
    ENV_GO_VERSION            = "go1.16.7"
  }

  stages {
    // setup environment
    stage('Setup Environment') {
      steps {
        // image tag
        script {
          switch(env.ENVIRONMENT) {
            case 'dev':
              env.ENV_DOCKER_IMAGE_TAG_ROOT = "gcr.io/dev-demo"
              env.ENV_DOCKER_IMAGE_TAG      = "gcr.io/dev-demo/sre-app/${params.APP_NAME}"
              env._GIT_CREDENTIALS_ID       = "jenkins"
              break
            case 'stg':
              env.ENV_DOCKER_IMAGE_TAG_ROOT = "gcr.io/stg-demo"
              env.ENV_DOCKER_IMAGE_TAG      = "gcr.io/stg-demo/sre-app/${params.APP_NAME}"
              env._GIT_CREDENTIALS_ID       = "jenkins"
              break
            case 'prod':
              env.ENV_DOCKER_IMAGE_TAG_ROOT = "gcr.io/prod-demo"
              env.ENV_DOCKER_IMAGE_TAG      = "gcr.io/prod-demo/sre-app/${params.APP_NAME}"
              env._GIT_CREDENTIALS_ID       = "ci-service"
              break
            default:
              env.ENV_DOCKER_IMAGE_TAG_ROOT = ""
              env.ENV_DOCKER_IMAGE_TAG      = ""
              env._GIT_CREDENTIALS_ID       = ""
              break
          }
        }

        // app name
        script {
          switch(params.APP_NAME) {
            case ~/schedule\/(.*)/:
              env.ENV_APP_NAME         = "${params.APP_NAME}".split("/")[-1]
              break
            default:
              env.ENV_APP_NAME         = "${params.APP_NAME}"
              break
          }
        }

        // block if selected ENVIRONMENT not supported
        script {
          if (params.ENVIRONMENT == "NOTSUPPORT") {
              error('ENVIRONMENT not supported')
          }
        }

        // block if selected ACTION not supported
        script {
          if (params.ACTION == "NOTSUPPORT") {
              error('ACTION not supported')
          }
        }

        // block if selected APP_NAME not supported
        script {
          if (params.APP_NAME == "NOTSUPPORT") {
            error('APP_NAME not supported')
          }
        }

        // utilities version check
        sh("kubectl version --client --short")
        sh("kustomize version --short")
        sh("helm version --client --short")

        // ensure credentials for docker login is prepared
        withCredentials([
          usernamePassword(
            credentialsId: 'docker-credentials',
            passwordVariable: 'USER_PASSWORD',
            usernameVariable: 'USER_ID'
          )
        ]) {
          sh("docker version")
          sh("docker login -u ${USER_ID} -p ${USER_PASSWORD} ${DOCKER_REGISTER}")
        }

        // git repo info
        sh(
          label:  "Git Repo: ${GIT_REPO}",
          script: "echo Git Repo: ${GIT_REPO}"
        )
        sh(
          label:  "Branch: ${BRANCH}",
          script: "echo Branch: ${BRANCH}"
        )
        sh(
          label:  "Revision: ${REVISION}",
          script: "echo Revision: ${REVISION}"
        )
        // environment
        sh(
          label:  "Environment: ${ENVIRONMENT}",
          script: "echo Environment: ${ENVIRONMENT}"
        )
        // app info
        sh(
          label:  "APP name: ${APP_NAME}",
          script: "echo APP name: ${APP_NAME}"
        )
        sh(
          label:  "APP Build name: ${ENV_APP_NAME}",
          script: "echo APP Build name: ${ENV_APP_NAME}"
        )
        // action
        sh(
          label:  "Action: ${ACTION}",
          script: "echo Action: ${ACTION}"
        )
        // workspace
        sh(
          label:  "Workspace: ${WORKSPACE_DIR}",
          script: "echo Workspace: ${WORKSPACE_DIR}"
        )
        sh(
          label:  "Application Build Directory: ${ENV_APP_BUILD_DIR}",
          script: "echo Application Build Directory: ${ENV_APP_BUILD_DIR}"
        )
        sh(
          label:  "Docker Build Directory: ${ENV_DOCKER_BUILD_DIR}",
          script: "echo Docker Build Directory: ${ENV_DOCKER_BUILD_DIR}"
        )
        sh(
          label:  "Kustomize Build Directory: ${ENV_KUSTOMIZE_DIR}",
          script: "echo Kustomize Build Directory: ${ENV_KUSTOMIZE_DIR}"
        )
        // docker info
        sh(
          label:  "Docker Register: ${DOCKER_REGISTER}",
          script: "echo Docker Register: ${DOCKER_REGISTER}"
        )
        sh(
          label:  "Docker Image Tag Root: ${ENV_DOCKER_IMAGE_TAG_ROOT}",
          script: "echo Docker Image Tag Root: ${ENV_DOCKER_IMAGE_TAG_ROOT}"
        )
        sh(
          label:  "Docker Image Tag: ${ENV_DOCKER_IMAGE_TAG}",
          script: "echo Docker Image Tag: ${ENV_DOCKER_IMAGE_TAG}"
        )
        // path
        sh(
          label:  "Path: ${PATH}",
          script: "echo Path: ${PATH}"
        )
        // golang version
        sh(
          label:  "Go Version: ${ENV_GO_VERSION}",
          script: "echo Go Version: ${ENV_GO_VERSION}"
        )
      }
    } // end of setup environment

    // git checkout
    stage('Git checkout') {
      steps {
        dir(WORKSPACE_DIR) {
          git url: "${GIT_REPO}",
              credentialsId: "${_GIT_CREDENTIALS_ID}",
              branch: "${BRANCH}"
        }

        dir(WORKSPACE_DIR) {
          sh(
            label:  "git checkout ${REVISION}",
            script: "git checkout ${REVISION}"
          )
        }
      }
    } // end of stage

    // build && deploy
    stage('Build') {
      steps {
        dir(WORKSPACE_DIR) {
          sh(
            label:  "Action: ${ACTION}",
            script: "make ${ACTION}"
          )
        }
      }
    }
  }

  post {
    /* clean up our workspace */
    always {
      dir(WORKSPACE_DIR) {
        deleteDir()
      }
    }
    /* end of clean up our workspace */
  }
}
